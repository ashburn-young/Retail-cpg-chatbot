# Docker Compose Configuration for Retail & CPG Chatbot
# ======================================================
# 
# This docker-compose.yml file provides a complete development and testing
# environment with all necessary services including Redis for context storage
# and optional databases for analytics.

version: '3.8'

services:
  # Main chatbot application
  chatbot:
    build: .
    ports:
      - "8000:8000"
    environment:
      # Application settings
      - CHATBOT_ENVIRONMENT=development
      - CHATBOT_DEBUG=true
      - CHATBOT_API_KEY=dev-api-key-12345
      
      # Context storage (Redis)
      - CHATBOT_CONTEXT_STORAGE_TYPE=redis
      - CHATBOT_REDIS_URL=redis://redis:6379
      
      # Analytics settings
      - CHATBOT_ANALYTICS_ENABLED=true
      - CHATBOT_ANALYTICS_STORAGE_TYPE=file
      
      # Company branding
      - CHATBOT_COMPANY_NAME=Your Retail Company
      - CHATBOT_SUPPORT_EMAIL=support@yourcompany.com
      - CHATBOT_SUPPORT_PHONE=1-800-YOUR-HELP
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for context storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - chatbot-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL for advanced analytics (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: chatbot_analytics
  #     POSTGRES_USER: chatbot
  #     POSTGRES_PASSWORD: secure_password_123
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - chatbot-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U chatbot"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Optional: Nginx reverse proxy (uncomment for production)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - chatbot
  #   networks:
  #     - chatbot-network
  #   restart: unless-stopped

  # Optional: Prometheus for monitoring (uncomment if needed)
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   networks:
  #     - chatbot-network
  #   restart: unless-stopped

  # Optional: Grafana for dashboards (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin123
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - chatbot-network
  #   restart: unless-stopped

networks:
  chatbot-network:
    driver: bridge

volumes:
  redis-data:
  # postgres-data:
  # prometheus-data:
  # grafana-data:

# Development override file
# Create docker-compose.override.yml for development-specific settings
---
# Example docker-compose.override.yml content:
# 
# version: '3.8'
# services:
#   chatbot:
#     volumes:
#       - .:/app
#     environment:
#       - CHATBOT_DEBUG=true
#       - CHATBOT_LOG_LEVEL=DEBUG
#     command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload
